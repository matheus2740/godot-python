Import("env")


cpython_src = Dir("cpython")
cpython_build = Dir("cpython_build")


env["bits"] = "64"
env["godot_default_binary_url"] = "https://downloads.tuxfamily.org/godotengine/3.2/Godot_v3.2-stable_osx.64.zip"
env["cpython_build"] = cpython_build
env["cpython_build_dir"] = cpython_build
env["DIST_SITE_PACKAGES"] = Dir(f"{env['DIST_PLATFORM']}/lib/python3.7/site-packages")

### Build config for pythonscript ###


env.AppendUnique(CFLAGS=["-m64"])
env.AppendUnique(LINKFLAGS=["-m64"])
# Cannot use CPPPATH&LIBPATH here given headers are within `cpython_build` target,
# so Scons consider the headers are a missing target
env.AppendUnique(CFLAGS=[f"-I{cpython_build.abspath}/include/python3.7m/"])
# env.AppendUnique(LIBPATH=[f"{cpython_build.abspath}/lib"])
env.AppendUnique(LINKFLAGS=[
    f"-L{cpython_build.abspath}/lib"
])


### Fetch Python repo ###


env.Command(
    cpython_src,
    None,
    "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.7.1 --single-branch ${TARGET}",
)
env.NoClean(cpython_src)


### Build Python ###

print('CFL', env['CFLAGS'])
# TODO: allow to compile cpython with `--with-pydebug` ?
env.Command(
    cpython_build,
    cpython_src,
    (
        "cd ${SOURCE} && "
        "echo Configuring CPython... && "
        './configure --enable-shared --prefix=${TARGET.get_abspath()} CFLAGS="${CFLAGS}" LDFLAGS="-rpath @loader_path/lib" && '
        "echo Building CPython... && "
        # Running the python setup inside a virtualenv gets python confused...
        # setting sys._home to None seems to fix the problem.
        # this seems to be a bug in cpython: https://bugs.python.org/issue15366
        "sed -i -e '1s/^/import sys;sys._home=None;/' ${SOURCE.get_abspath()}/setup.py &&"
        "make -j4 && "
        "echo Installing CPython in ${TARGET.get_abspath()}... && "
        "make -j4 install &&"
        # MacOS does not look for libs the same way other systems do.
        # Lib paths are hardcoded into the executable, and if the lib is not found at the path, then it craps out.
        # Unfortunately compiling python will hardcode the absolute path of libpython.dylib into the executable,
        # so if you move it around it will break.
        # the solution here is to modify the executable and make sure the lib path is not an absolute path,
        # but an path relative to @loader_path, which is a special symbol that points to the executable.
        # See: http://joaoventura.net/blog/2016/embeddable-python-osx-from-src/ , https://stackoverflow.com/questions/7880454/python-executable-not-finding-libpython-shared-library
        "chmod 655 ${TARGET.get_abspath()}/lib/libpython3.7m.dylib &&"
        "install_name_tool -id \"@rpath/libpython3.7m.dylib\" ${TARGET.get_abspath()}/lib/libpython3.7m.dylib &&"
        "install_name_tool -change ${TARGET.get_abspath()}/lib/libpython3.7m.dylib @loader_path/../lib/libpython3.7m.dylib ${TARGET.get_abspath()}/bin/python3 &&"
        "install_name_tool -add_rpath \"@loader_path/../lib\" ${TARGET.get_abspath()}/bin/python3"
    )
)
env.NoClean(cpython_build)
